Otto-Friedrich-Universität Bamberg

Lehrstuhl für Praktische Informatik

Masterarbeit
im Studiengang International Software Systems Science
der Fakultät Wirtschaftsinformatik und Angewandte Informatik
der Otto-Friedrich-Universität Bamberg

Zum Thema:

Beyond REST: GraphQL as an Alternative
for Microservice APIs

Vorgelegt von:

Florian Beetz
Themensteller:
Prof. Dr. Guido Wirtz
Abgabedatum:
17.12.2020

Contents

Contents
1 Introduction

1

2 Conceptual Foundations of Microservices Architectures

2

2.1

Microservices and Microservices Architectures . . . . . . . . . . . . . . . .

2

2.2

Representational State Transfer (REST) . . . . . . . . . . . . . . . . . . .

2

2.2.1

REST Principles . . . . . . . . . . . . . . . . . . . . . . . . . . . .

2

2.2.2

Hypertext Transfer Protocol (HTTP) . . . . . . . . . . . . . . . . .

3

2.2.3

Javascript Object Notation (JSON) . . . . . . . . . . . . . . . . . .

4

2.2.4

Hypermedia as the Engine of Application State (HATEOAS)

. . .

4

GraphQL . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.3.1

Structure of the Language . . . . . . . . . . . . . . . . . . . . . . .

4

2.3.2

GraphQL Schemas . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.3.3

Tools for GraphQL . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

2.3

3 Related Work

5

3.1

Microservices Taxonomy . . . . . . . . . . . . . . . . . . . . . . . . . . . .

5

3.2

Comparison of REST and GraphQL Client Implementations . . . . . . . .

5

4 Case Study

6

4.1

Case Study Design . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

4.2

Implementation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

4.3

Architectural Differences of the Implementations . . . . . . . . . . . . . . .

6

4.4

Performance Comparison . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

4.5

Schema Evolution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

4.6

Discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

6

5 Conclusion

7

References

8

Lehrstuhl für Praktische Informatik

I

List of Figures

List of Figures

Lehrstuhl für Praktische Informatik

II

List of Tables

List of Tables
1

Overview of selected HTTP Methods [FR14] . . . . . . . . . . . . . . . . .

Lehrstuhl für Praktische Informatik

3

III

Listings

Listings
1

HTTP GET request . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

3

2

HTTP response to GET request . . . . . . . . . . . . . . . . . . . . . . . .

3

3

HTTP PUT request . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .

4

4

HTTP response to PUT request . . . . . . . . . . . . . . . . . . . . . . . .

4

Lehrstuhl für Praktische Informatik

IV

Abbreviations

Abbreviations
API

Application Programming Interface

HATEOAS Hypermedia as the Engine of Application State
HTML

Hypertext Markup Language

HTTP

Hypertext Transfer Protocol

JSON

Javascript Object Notation

REST

Representational State Transfer

URL

Uniform Resource Locator

Lehrstuhl für Praktische Informatik

V

1

1

Introduction

Introduction

Lehrstuhl für Praktische Informatik

1

2

Conceptual Foundations of Microservices Architectures

2

Conceptual Foundations of Microservices Architectures

2.1

Microservices and Microservices Architectures

2.2

Representational State Transfer (REST)

Representational State Transfer (REST) is an architectural style for network-based applications coined by Fielding [Fie00]. Webservices and Application Programming Interfaces (APIs) following this style are often referred to as RESTful APIs. According to
Fielding, this style focuses “on the roles of components, the constraints upon their interaction with other components, and their interpretation of significant data elements”. One
of the key aspects of his definition is the word style, because REST is not a guideline or
a standard [MKV18].
2.2.1

REST Principles

Although REST does not provide a concrete set of rules or guidelines, several principles
for RESTful design exist.
Identifiable Resources The key abstraction of REST are resources [Fie00, EGST07].
Resources can be any information that can be named. This includes types of information
commonly found in the web, such as HTML-documents, images, or JavaScript files, but
also can mean non-virtual objects (e.g. a person), or temporal services (e.g. today’s
weather in Bamberg), collections of other resources, and so on. While resources may
change over time, the semantics of the resource must be static. For example, in the context
of a version control system, the resource latest version always identifies the latest version,
although this resource may change at some point from version 1.0 to version 1.1. Every
resource is identified by a resource identifier, e.g. a Uniform Resource Locator (URL).
Self-descriptive Resources Components following the REST architectural style communicate by using representations of resources [Fie00]. Representations of resources include some kind of binary data, and metadata describing this data. In some cases, also
metadata describing the metadata is part of the representation. This separation of resource and representation introduces a layer of indirection between them [EGST07].
Stateless Interaction According to Fielding, all REST interactions are stateless [Fie00].
While this does not mean that REST applications do not deal with state, it requires all
requests to contain all the information for processing it to be contained in this request,
independant of requests that may have preceeded it. This allows applications to scale
better, as no resources are required to maintain application state at the processing entity,
while also allowing for requests to be processed in parallel. Additionally, it allows for
better caching of responses, as intermediaries can fully understand a single request in
isolation.
Lehrstuhl für Praktische Informatik

2

2

Conceptual Foundations of Microservices Architectures

Few Primitive Operations REST components only support a very limited set of
operations per resource [EGST07]. The operations of a resource typically produce a representation of the resource capturing its current or intendet state. These operations are
commonly implemented in practice using Hypertext Transfer Protocol (HTTP) methods (see subsubsection 2.2.2).
Cachability Caching is an important concept of REST, as it improves the latency
between client and server [EGST07, Fie00]. Caches can be used at the client-side to avoid
sending network requests when the same resource is requested again, or at the serverside to avoid processing requests mutliple times. This cachablity in REST applications
is achieved mainly by idempotency of certain requests. Idempotency in this case means,
that certain requests do not alter the future behaviour of the server. So for example, if a
client requests a resource multiple times, the response of the server does not change.
Transparent Intermediaries Between the components of REST, intermediaries can
be placed that are transparent to both the client and server [Fie00]. These intermediaries
can take up different roles, for example cache communication between client and server,
restrict access to resources, or modify and augment requests and responses.
2.2.2

Hypertext Transfer Protocol (HTTP)

Commonly, REST APIs are implemented on top of HTTP for obtaining, creating, modifying, and deleting resources [SCL15].
HTTP Method
GET
HEAD
POST
PUT
DELETE
PATCH
OPTIONS

Idempotent Safe
✓
✓

✓
✓

✓
✓
✓

✓

Table 1: Overview of selected HTTP Methods [FR14]
1 GET /item HTTP /1.1
2 Host: localhost
3 Accept : application /json
4

Listing 1: HTTP GET request
1
2
3
4
5

HTTP /1.1 200 OK
Server : api - server
Content -Type: application /json
{" title ": "Item", "price ": 1.99}

Listing 2: HTTP response to GET request
Lehrstuhl für Praktische Informatik

3

2

Conceptual Foundations of Microservices Architectures

1
2
3
4
5

PUT /item HTTP /1.1
Host: localhost
Content -Type: application /json
{" title ": "Item", "price ": 3.59}

Listing 3: HTTP PUT request
1 HTTP /1.1 204 No Content
2 Server : api - server
3

Listing 4: HTTP response to PUT request

2.2.3

Javascript Object Notation (JSON)

2.2.4

Hypermedia as the Engine of Application State (HATEOAS)

2.3

GraphQL

2.3.1

Structure of the Language

2.3.2

GraphQL Schemas

2.3.3

Tools for GraphQL

Lehrstuhl für Praktische Informatik

4

3

Related Work

3

Related Work

3.1

Microservices Taxonomy

3.2

Comparison of REST and GraphQL Client Implementations

Lehrstuhl für Praktische Informatik

5

4

Case Study

4

Case Study

4.1

Case Study Design

4.2

Implementation

4.3

Architectural Differences of the Implementations

4.4

Performance Comparison

4.5

Schema Evolution

4.6

Discussion

Lehrstuhl für Praktische Informatik

6

5

5

Conclusion

Conclusion

Lehrstuhl für Praktische Informatik

7

References

References
[EGST07] Justin R. Erenkrantz, Michael M. Gorlick, Girish Suryanarayana, and
Richard N. Taylor. From Representations to Computations: the evolution of
web architectures. In Ivica Crnkovic and Antonia Bertolino, editors, Proceedings of the 6th joint meeting of the European Software Engineering Conference
and the ACM SIGSOFT International Symposium on Foundations of Software
Engineering, 2007, Dubrovnik, Croatia, September 3-7, 2007, pages 255–264.
ACM, 2007.
[Fie00]

Roy T. Fielding. Architectural Styles and the Design of Network-based Software
Architectures, volume 7. University of California, Irvine Irvine, 2000.

[FR14]

R. Fielding and J. Renschke. Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content. RFC 7231, RFC Editor, June 2014.

[MKV18] Kyrylo Malakhov, Oleksandr Kurgaev, and Vitalii Velychko. Modern RESTful
API DLs and frameworks for RESTful web services API schema modeling,
documenting, visualizing. CoRR, abs/1811.04659, 2018.
[SCL15]

Gerald Schermann, Jürgen Cito, and Philipp Leitner. All the Services Large
and Micro: Revisiting Industrial Practice in Services Computing. In Alex
Norta, Walid Gaaloul, G. R. Gangadharan, and Hoa Khanh Dam, editors,
Service-Oriented Computing - ICSOC 2015 Workshops - WESOA, RMSOC,
ISC, DISCO, WESE, BSCI, FOR-MOVES, Goa, India, November 16-19, 2015,
Revised Selected Papers, volume 9586 of Lecture Notes in Computer Science,
pages 36–47. Springer, 2015.

Lehrstuhl für Praktische Informatik

8

Eigenständigkeitserklärung

Ich erkläre hiermit gemäß § 9 Abs. 12 APO, dass ich die vorstehende Masterarbeit
selbstständig verfasst und keine anderen als die angegebenen Quellen und Hilfsmittel
benutzt habe.

Bamberg, den June 30, 2020

Lehrstuhl für Praktische Informatik

Florian Beetz

9

